var relearn_search_index = [
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Linux",
    "uri": "/linux/"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Networking",
    "uri": "/networking/"
  },
  {
    "breadcrumb": "",
    "content": "Check the sidebar! Coming soon..\n",
    "description": "",
    "tags": null,
    "title": "Python",
    "uri": "/python/"
  },
  {
    "breadcrumb": "",
    "content": "Upcoming Projects: Searx Create my own searx search engine\ngo to https://searx.space/\nRSS Create and RSS feed of my site and subscribe to other feeds.\nFollow these sites:\nhttps://denshi.org/ https://drewdevault.com/ https://opensourcemusings.com/support https://www.mrmoneymustache.com/\nDWM Tile Manager http://thedarnedestthing.com/vim/wiki%20cheatsheet\n[[../Security/firefox_hardening]]\nBrowser Sync https://www.xbrowsersync.org/\nPrivacy tools https://www.privacytools.io/\n",
    "description": "",
    "tags": null,
    "title": "Tools",
    "uri": "/tools/"
  },
  {
    "breadcrumb": "Tools",
    "content": "Github: https://github.com/89luca89/distrobox\nRun native containers that have access to the host file system Creates an app launcher icon for the container\nLaunch gui apps from other distros natively. Even without spinning up the container first\nMake separate shortcuts for separate distros in the terminal\nMake a profile in the terminal for the container:\n`distrobox-enter –name ubuntu-20\nMake sure to check the box “run a custom command instead of my shell”\nThen set a custom shortcut in your OS to that terminal profile gnome-terminal --profile=ubuntu\nHow to Install curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/install | sudo sh\nor\nsudo dnf -y install distrobox\nYou can find a list of container distros here: https://github.com/89luca89/distrobox/blob/main/docs/compatibility.md#host-distros\nCommands Create a container distrobox create --name aur --image archlinux or distrobox-create --name archlinux --image docker.io/library/archlinux or distrobox create -n ubuntu -i ubuntu:20.04\nAdditional Options –nvidia - add your host nvidia drivers\n–additional-packages {package-name} - install additional packages\nEnter the container distrobox enter aur\nAdd app from another distro to your app launcher/ application menu `distrobox-export –app app-name\nCreate a GUI app distrobox-export --app {appname}\nCreate a temporary container distrobox-ephemeral –image archlinux\nCreate a container for testing server distros distrobox create --image almalinux:latest\nCreate an arm container\ndistrobox create -i aarch64/fedora -n fedora-arm64 distrobox enter fedora-arm64Add distro to your display manager to boot into the distribution\nhttps://cloudyday.tech.blog/2022/05/14/distrobox-is-awesome/ https://github.com/89luca89/distrobox/blob/main/docs/posts/run_latest_gnome_kde_on_distrobox.md\nSetting up a fedora distrobox in ublue To create a Fedora 38 Distrobox, run:\ndistrobox create --image registry.fedoraproject.org/fedora-toolbox:38 --name fedora\nEnter the box: distrobox enter fedora\nTo create an Ubuntu 22.04 Distrobox, run:\ndistrobox create --image docker.io/library/ubuntu:22.04 --name ubuntu\nTo create an Arch Linux Distrobox, run:\ndistrobox create --image docker.io/library/archlinux:latest --name arch\nTo create an Debian Linux Distrobox, run:\ndistrobox create --image docker.io/library/debian:latest --name debian\nList of tested container images.\nWhen choosing an image for your container, consider which package manager and repos you want to use (e.g. apt vs. pacman), and pick one that you’re most comfortable with!\nExporting programs from Distrobox You can export a GUI program (for example, mpv) by running the following from inside the Distrobox:\ndistrobox-export --app mpv\nYou can also export a binary or CLI program (for example, vim) by running the following from inside the Distrobox. You need to provide an export path and know where the original binary exists in the Distrobox’s filesystem. An easy way to find out is running which vim (replace vim with the name of the binary you want to export). The export command will create a shell script that runs the specified binary from inside the Distrobox.\ndistrobox-export --bin /usr/bin/vim --export-path ~/.local/bin\nRead more in the Distrobox documentation about distrobox-export\nIntegrating VSCode with Distrobox There are two ways to integrate VSCode with a Distrobox.\nThe easiest way is to just install it inside your Distrobox and distrobox-export it. The integrated terminal and all addons will then be run inside that single Distrobox. The other way is with the Dev Containers extension.\nBoth ways are detailed inside the official Distrobox tutorial for integrating with VSCode\nUsing the host’s xdg-open inside Distrobox Some GUI programs use xdg-open to open URLs, but it doesn’t work when running your browser on the host.\nYou can fix this by adding the following shell script to your ~/.local/bin/ and giving it executable permissions.\n#!/bin/bash if [ ! -e /run/.containerenv ] \u0026\u0026 [ ! -e /.dockerenv ]; then # if not inside a container /usr/bin/xdg-open \"$@\" # run xdg-open normally else distrobox-host-exec /usr/bin/xdg-open \"$@\" # run xdg-open on the host fi\nIf you have xdg-open installed inside the Distrobox, you need to make sure that ~/.local/bin/ is in your $PATH before /usr/bin/.\nImmutable distros Apps do not get root access to your o not get root access to your system.\nCloud native client /usr is read only parts of the disk Able to roll back after updates\n",
    "description": "",
    "tags": null,
    "title": "Distrobox Guide",
    "uri": "/tools/distrobox/"
  },
  {
    "breadcrumb": "Linux",
    "content": "When you first download Fedora Workstation, it’s going to be a little hard to figure out how to make it usable. Especially if you’ve never tinkered with Linux before.\nHere is how to set up Fedora.\nAdd badname user $ adduser --badname firstname.lastname $ sudo usermod -aG wheel username\n# uncomment this line in the visudo file $ sudo visudo %wheel ALL=(ALL) ALLDelete other user:\n$ userdel username\nDNF Config (for speed) DNF is one of the package managers that comes with Fedora. You use it to install most software and applications.\nThe official doc is Here Just open up your DNF config file with your favorite text editor.\nsudo nano /etc/dnf/dnf.confThen add the following:\nfastestmirror=True max_parallel_downloads=10 defaultyes=True keepcache=TrueClear cache (do this occasionally) sudo dnf clean dbcache or sudo dnf cleanall\nUpdate DNF sudo dnf -y update\nDNF commands https://docs.fedoraproject.org/en-US/fedora/latest/system-administrators-guide/package-management/DNF/\nRPM Fusion More accessibility to various software packages.\nhttps://rpmfusion.org/\nFedora with dnf:\nsudo dnf -y install https://mirrors.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm https://mirrors.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpmAppStream metadata to enable users to install packages using Gnome Software/KDE Discover\nsudo dnf -y groupupdate coreflatpak\nlhttps://flatpak.org/setup/Fedora\nflatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakreposet a hostname sudo hostnamectl set-hostname \"New_Custom_Name\" this will show after next reboot\nMake it yours in the software center\ngnome tweaks add minimize and maximize\nextentions (by gnome) (green puzzle piece) Add a Dock https://extensions.gnome.org/extension/307/dash-to-dock/\nWindow is Ready - Notification Remover https://extensions.gnome.org/extension/1007/window-is-ready-notification-remover/\nVitals https://extensions.gnome.org/extension/1460/vitals/\nArch Menu https://extensions.gnome.org/extension/3628/arcmenu/\nDash to Panel https://extensions.gnome.org/extension/1160/dash-to-panel/\nScreenshot tool https://extensions.gnome.org/extension/1112/screenshot-tool/\nran gnome-screenshot tool in command prompt and it asked to install\nl2tp VPN sudo dnf install xl2tpd sudo dnf install NetworkManager-l2tp sudo dnf install NetworkManager-l2tp-gnome service NetworkManager restartAirpods not pairing Issue remove from the pairing list, force them in pairing mode and pair them back.\nThis can be made easy with bluetoothctl.\n1/ Just in case, restart the bluetooth service:\n$ sudo systemctl restart bluetooth $ systemctl status bluetooth 2/ bluetoothctl is easier than the UI imo\n$ bluetoothctl [bluetooth] $ devices Device 42:42:42:42:42:42 My AirPods \u003c-- grab the name here [bluetooth] $ remove 42:42:42:42:42:42 Now, make sure your airpods are in the charging case, close the lid, wait 15 seconds, then open the lid. Press and hold the setup button on the case for up to 10 seconds. The status light should flash white, which means that your AirPods are ready to connect\n3/ Pair them back\n[bluetooth] $ pair 42:42:42:42:42:42 \u003c--- add the same device from earlier Enable Fractional Scaling This lets you change display scaling in smaller increments. Make sure Wayland is turned on \u003e\nrun: gsettings set org.gnome.mutter experimental-features \"['scale-monitor-framebuffer']\"\nthen Reboot\nInstall gimp $ sudo dnf install gimp enable in screenshot tool after install for gimp {f}\nInstall Arrows https://graphicdesign.stackexchange.com/questions/44797/how-do-i-insert-arrows-into-a-picture-in-gimp\nGo to your home folder Go to .config/GIMP Go to the folder with a version number (2.10 for me) Go to scripts Download the arrow.scm file and place it here. Don't forget to unzip. Open GIMP and draw a pathFrom Tools menu, select Arrow\n= h.265 main 10 profile media codec error =\nKeypassxc sudo dnf install snapd sudo ln -s /var/lib/snapd/snap /snap sudo snap install keepassxcInstall Obsidian using Flatpak In your terminal, run the following command to install Obsidian:\nflatpak install flathub.obsidian.Obsidian Open Obsidian by running the following command:\nflatpak run.obsidian.Obsidian Distrobox See distrobox\nZSH For Humans GitHub - romkatv/zsh4humans: A turnkey configuration for Zsh\nInstall Starcraft on Fedora https://www.youtube.com/watch?v=eefsL9K2w4k\nStarcraft 2 install on Fedora Workstation 38 Install your latest gpu driver https://github.com/lutris/docs/blob/master/InstallingDrivers.md I am just running off of built in AMD graphics. So we just need to install support for Vulkan API sudo dnf install vulkan-loader vulkan-loader.i686\nInstall Wine $ sudo dnf -y install wine\nInstall Lutris Install the Flatpak version in software center.\nFedora Hotkeys Terminal Close Terminal shift + c + q\nPrevious Tab c + Page Up\nNext Tab c + Page Down\nMove to Specific Tab Alt + #\nFull Screen F11\nNew Window Shift + Ctrl + t\nClose Tab Shift + Ctrl + w\nDesktop Run a command super + F2\nSwitch Between Applications Alt + Esc\nMove Window to Left Monitor Shift + Super + \u003c-\nMove Window to Right Monitor Shift + Super + -\u003e\nMinimize Current Window Super + H\nClose Current Appllication Ctrl + Q\nBrowser Firefox Switch Between Tabs Ctrl + Tab\nSwitch Between Tabs in Reverse Ctrl + Shift + Tab\nDetach Tab Extension https://addons.mozilla.org/en-US/firefox/addon/detach-tab/\nDetach Tab Ctrl _ Shift _ Space\nReattach Tab Ctrl + Shift + v\n",
    "description": "",
    "tags": null,
    "title": "Fedora Desktop Setup",
    "uri": "/linux/fedora_setup/"
  },
  {
    "breadcrumb": "Networking",
    "content": " It took me a whopping 2 years to finish my CCNA! I kept giving up and quitting my studies for months at a time. Why? Because I couldn’t remember the massive amount of content covered in the CCNA. It felt hopeless. I could have done it in 6 month (or faster) if I knew how to study.\nI hadn’t taken a test in 10 years before this. So I had completely forgotten how to learn. This post is about the mistakes I made studying for the CCNA and how to avoid them.\nYou will also learn, as I did, about spaced repetition. I’ve also included a 6 month CCNA spaced repetition calendar.\nMy Mistakes, So You Don’t Make Them Mistake #1 Didn’t start flashcards until the final 30 days I wish I would have started flashcards from day 1. This would have helped a crap ton. Remembering all of the little details is not only useful for taking the test. It embeds the concepts in your brain and keeps you processing how things work .\nIf there is anything you take from this list. You should definitely be doing some flashcards every day.\nMistake #2 Not enough labs as I went. While studying the OCG and video courses. I did some labs. But I also skipped a ton of labs because it wasn’t convenient at the time. Then I was forced to lab every single topic in the final 30 days. A lot of cramming was done..\nMake sure to do all of the labs as you go. Make up your own labs as well. This is very important to building job worthy skills.\nMistake #3 Didn’t have a plan or stick with it. When your plan consists of, “just read everything and watch the videos and take the test when you feel ready”, you tend to procrastinate and put things off. Make a study schedule and a solid plan. (See below)\nHaving a set date for when you will take the test was pretty motivating. I did not find this out until about 30 days until my test.\nSpaced Repetition If you are using Anki flashcards for your studies, you may already be using spaced repetition. Spaced repetition is repeatedly reviewing with the time in between reviews getting longer each time you review it.\nHere is an excellent article about our learning curves and why spaced repetition helps us remember things https://fs.blog/spacing-effect/\nHow to set up a spaced repetition calendar for CCNA. Step 1. Plan how long your studies will take\nFigure out how long you need. It usually takes around 240 hours of studying for CCNA. (Depending on experience). Then figure out how many hours per day that you can spend on studying. This example is based on a 6 month study calendar.\nYou can use this 6 month excel calendar to plan and track your progress. You. can still use this method If you have already been studying CCNA. Just edit your calendar for how much time you have left.\nThe calendar is also based on Wendel Odom’s Official Cert Guide. You will also want to mix your other resources into your reviews.\nDecide what your review sessions will be\nPlan to review each chapter 3-4 times. here is what I did for review sessions to pass the exam.\nReview 1 Read and highlight (and flashcards)\nRead the chapter. Highlight key information that you want to remember. Do a lab for the material you studied (if applicable) Answer DIKTA questions Start Chapter 1 Anki Flascards Review 2 Copy highlights over to OneNote (keep doing flashcards)\nCopy your highlights over to OneNote. (using copy and paste if you have the digital book) Read your highlights and make sure you understand everything. lab and continue doing flashcards. (just go through Anki suggested flashcards, not just ones for the specific chapter.) Review 3 Labs and Highlight your notes (and flashcards)\nMore labs!\nGo over your notes. Color coding everything. (You can find my jumbled note mess here)\nGreen: Read again\nTeal: Very important Learn this/ lab it.\nRed/ purple: make extra flashcards out of this.\nReview 4 Practice questions and review\nGo through and answer the DIKTA questions again. Review any missed answers. Lab anything you aren’t quite sure of. The final 30 days\nI HIGHLY recommend Boson ExSim for your final 30 days of studying. ExSim comes with 3 exams (A,B, and C). Start with exam A in test simulation mode. Leave about a week in between each practice exam so you can go over your answers and Boson’s explanations for each answer.\nOne week before your test, (after you’ve completed exams A,B, and C). Do a random exam. Make sure you do the timed version that don’t show your score as you go.\nYou should be scoring above 900 by your 3rd and 4th exam if you have been reviewing Boson’s answer explanations.\nSchedule your exam\nPearson view didn’t let me schedule the exam past 30 days out from when I wanted to take it. I’m not sure if this is the case all the time. But by the time you are 30 days out you should have your test scheduled. This will light the fire under you. Great motivation for the home stretch.\nIf your exam is around June during Cisco Live, Cisco usually offers a 50% discount for an exam voucher. You probably won’t find any other discounts unless you pay for Cisco’s specific CCNA training.\nFinal word on labs You can technically pass the CCNA without doing many labs. But this will leave you at a HUGE disadvantage in the job market. Labs are crucial for really understanding networking. Knowing your way around the CLI and being able to troubleshoot networking issues will make you stand out from those who crammed for the exam.\nIf you’ve made it this far I really appreciate you taking the time to read this post. I really hope it helps at least one person.\n",
    "description": "",
    "tags": null,
    "title": "How to Study for CCNA",
    "uri": "/networking/ccna_spaced_repetition/"
  },
  {
    "breadcrumb": "Networking",
    "content": " There are a lot of great CCNA resources out there. This list does not include all of them. Only the ones that I personally used to pass the CCNA 200-301 exam.\nMaterials for CCNA are generally separated into 5 categories:\nBooks Video courses Labs Practice test Flashcards Books Wendell Odom OCG Official cert guide library To me, this is the king of CCNA study materials. Some people do not like reading but this will give you more depth than any other resource on this list. Link.\nTodd Lammle Books Yes, I read both the OCG and Todd Lammle books cover to cover. No, I do not recommend doing this. Todd has a great way of adding humor into networking. If you need to build up your networking from the ground up. These books are great. Link.\nVideo Courses CBT Nuggets Jeremy Ciara makes learning networking so much fun. This was a great course but is not enough for you to pass the exam on it’s own. Also, a CBT nuggets monthly subscription will set you back $59 per month. Link.\nJeremy’s IT Lab Jermey’s IT lab course was the most informative for me. Jeremy is really great at explaining the more complex topics. Jeremy’s course also includes Packet Tracer labs and and in depth Anki flashcard deck for free. Link.\nLabs David Bombal’s Packet Tracer Labs These labs will really make you think. Although they do steer off the exam objectives a bit. Link.\nJeremy’s IT labs These were my favorite labs by far. Very easy to set up with clear instructions and video explanations. Link.\nPractice test Boson Exsim I can’t stress this enough. if there is one resource that you invest some money into. it’s the Boson practice exams. This is a test simulator that is very close to what the actual test will be like. Exsim comes with 3 exams.\nAfter taking one of these practice tests you will get a breakdown of your scores per category. You will also get to go through all of your questions and see detailed explantations for why each answer is right or wrong.\nThese practice exams were crucial for me to understand where my knowledge gaps were. Link.\nSubnettingpractice.com You can learn subnetting pretty good. Then forget some of the steps a month later and have to learn all over again. It was very helpful to go over some of these subnetting questions once in a while. Link.\nFlashcards Anki Deck These are the only flashcards I used. It is very nice not to have to create your own flashcards. Having the Anki app on your phone is very convenient. You can study whenever you have a few minutes of downtime.\nAnki also used spaced-repetition. It will give you harder flashcards more often based on how you rate their difficulty.\nThis particular deck goes along with the OCG. You can filter by chapter and add more as you get through the book.\nI will be using Anki flashcards for every exam in the future. Link.\nMy Top 3 Be careful not to use too many resources. You may get a bit overwhelmed. Especially if this is your first certification like it was for me. You will be building study habits and learning how to read questions correctly. So focus on quality over quantity.\nIf I had to study for the CCNA again, I would use these three resources:\nOCG Boson Exsim Anki Flashcards If you like these posts, please let me know so i can keep making more like them!\n",
    "description": "",
    "tags": null,
    "title": "Resources I used to Pass CCNA",
    "uri": "/networking/resources_for_passing_ccna/"
  },
  {
    "breadcrumb": "Linux",
    "content": " We are going to use Vagrant to set up two RHEL 8 servers with some custom configuration options. I will include some helpful Vagrant commands at the end if you get stuck.\nIn this guide, I will be using Fedora 38 as my main operating system. I use Fedora because it is similar in features to Red Hat Linux Distributions. This will give me even more practice for the RHCSA exam as I use it in day-to-day operations.\nNote, if you are using Windows, you will need to install ssh. This can be done by installing Git. Which automatically installs ssh for you.\nYou will also need to have the latest version of Virtualbox installed.\nHere are the steps: Download and install Vagrant Make a new directory for your vagrant lab to live in Add the vagrant box Install the Vagrant disk size plugin Initialize the Vagrant box and Edit the Vagrant file Bring up the Vagrant box 1. Download and install Vagrant. In Fedora, this is very easy. Run the following command to download and install Vagrant:\nsudo dnf install vagrant\n2. Make a new directory for your vagrant lab to live in. Make your vagrant directory and make it your current working directory:\ncd Vagrant Add the Vagrant box. vagrant box add generic/rhel8\nInstall the Vagrant disk size plugin. The disk size program will help us set up custom storage sizes. Since we will be re-partitioning storage, this is a useful feature.\nvagrant plugin install vagrant-disksize\nInitialize the Vagrant box and edit the Vagrant file. First, initialize the Vagrant box in the vagrant directory: vagrant init generic/rhel8\nAfter completion, there will now be a file called “Vagrantfile” in your current directory. Since Vim is on the RHCSA exam, it’s wise to practice with it whenever you can. So let’s open the file in Vim:\nvim Vagrantfile\nYou will see a bunch of lines commented out, and a few lines without comments. Go ahead and comment out everything and paste this at the end of the file:\nVagrant.configure(\"2\") do |config config.vm.box = \"generic/rhel8\" config.vm.define \"server1\" do |server1| server1.vm.hostname = \"server1.example.com\" server1.vm.network \"private_network\", ip: \"192.168.2.110\" config.disksize.size = '10GB' end config.vm.define \"server2\" do |server2| server2.vm.hostname = \"server2.example.com\" server2.vm.network \"private_network\", ip: \"192.168.2.120\" config.disksize.size = '16GB' end config.vm.provider \"virtualbox\" do |vb| vb.memory = \"2048\" end end|The configuration file is fairly self-explanatory. Save Vagrantfile and exit Vim. Then, create /etc/vbox/networks.conf and add the following:\n* 10.0.0.0/8 192.168.0.0/1 * 2001::/646This will allow you to be more flexible with what network addresses can be used in VirtualBox.\nBring up the Vagrant box. Now, we bring up the Vagrant box. This will open two Virtual machines in Virtualbox named server1 and server2 in headless mode (there is no GUI).\nvagrant up\nGreat! Now we can use Vagrant to ssh into server1:\nvagrant ssh server 1\nFrom server1 ssh into server2 using its IP address:\n[vagrant@server1 ~]$ ssh 192.168.2.120\nNow you are in and ready to stir things up. The last thing you need is some commands to manage your Vagrant machines.\nHelpful Vagrant commands. Shut down Vagrant machines:\nvagrant halt Suspend or resume a machine:\nvagrant suspend vagrand resumeRestart a virtual machine:\nvagrant reload\nDestroy a Vagrant machine:\nvagrant destroy [machine-name]\nShow running VMs:\nvagrant status\nList other Vagrant options:\nvagrant\nIf you are going for RHCSA, there is no doubt that you will also use Vagrant sometime in the future. And as you can see, it’s pretty quick and simple to get started.\nFeel free to reach out with questions.\n",
    "description": "",
    "tags": null,
    "title": "RHCSA Lab Using Vagrant",
    "uri": "/linux/rhcsavagrantlabsetup/"
  },
  {
    "breadcrumb": "Linux",
    "content": " RHCSA Red Hat Enterprise Linux 8 (UPDATED) - Asghar Ghori\nHere are my notes from Asghar Gori’s RHCSA book. Buy the book or read the reviews here.\nChapter 1: Installation Chapter 2: Interaction Chapter 3: File Management Chapter 4: Advanced File Management Chapter 5: Basic User Management Chapter 6: Advanced User Management Chapter 7: The Bash Shell Chapter 8: Process and Task Scheduling Chapter 9: Basic Package Management Chapter 16: Networking Chapter 17: Network File System ",
    "description": "",
    "tags": null,
    "title": "RHCSA Notes",
    "uri": "/linux/rhcsanotes/"
  },
  {
    "breadcrumb": "Networking",
    "content": "It’s easy to get overwhelmed with options after completing your CCNA. What do you learn next? If you are trying to get a job as a Network Engineer, you will want to check this out.\nI went through dozens of job listings that mentioned CCNA. Then, tallied up the main devices/vendors, certifications, and technologies mentioned. And left out anything that wasn’t mentioned more than twice.\nCore CCNA technologies such as LAN, WAN, OSPF, Spanning Tree, VLANs, etc. have been left out. The point here is to target the most sought after technologies and skills by employers. I also left out soft skills and any job that wasn’t a networking specific role.\nDevices/ Vendors Palo Alto is huge! I’m not suprised by this. Depending on the company, a network engineer may be responsible for firewall configuration and troubleshooting. It also looks like Network Engineers with a wide variety of skills are saught after.\nDevice/Vendor Times Mentioned Palo Alto 9 Cisco ASA 6 Juniper 6 Office 365 5 Meraki 4 Vmware 4 Linux 4 Ansible 4 AWS 3 Wireshark 3 Technologies Firewall comes in first again. Followed closely by VPN skills. Every interview I had for a Network Engineer position asked if I knew how to configure and troubleshoot VPNs.\nTechnology Times Mentioned Firewall 19 VPN 16 Wireless 12 BGP 12 Security 12 MPLS 10 Load balancers 8 Ipsec 7 ISE 6 DNS 5 SDWAN 5 Cloud 4 TACACS+ 4 ACL 4 SIEM 4 IDS/IPS 4 RADIUS 3 ITIL 3 Ipam 3 VOIP 3 EIGRP 3 Python 3 Certifications CCNP blew every other cert out of the water. Companies will be very interested if you are working towards this cert. Security + comes highly recommended as well.\nCertification Times Mentioned CCNP 18 Security+ 6 JNCIA 4 JNCIP 4 Network + 4 CCIE 4 PCNSA 3 So what do you do after CCNA? It depends…\nAre you trying to get a new job ASAP? Are there opportunities at your current role that you can use your new skills to leverage? Do you have some study time before you are ready to take the next step?\nCCNP Enterprise is a good bet if you really want to stand out in Network Engineering interviews.\nDon’t want to be a Network engineer? Continue to build a good base of IT skills. This will open you up to a larger variety of jobs and open skill paths that you need a good foundation to unlock.\nCore skills include:\nLinux/ Operating systems Networking General Cybersecurity Programming/ Scripting A good Linux certification like the RHCSA would be great to learn more about Linux, scripting, and operating systems. Security + would be good if you want to get a solid foundation of cyber security. And Python skills will give you a gold star in any IT interview.\nDon’t get paralyzed by choices. Pick something that interests you and go for it. That is the only way to get it right. Doing what you enjoy is better than not doing anything at all because you can’t decide the best path.\nHopefully we can revisit this post after learning Python to get a much bigger sample size.\n",
    "description": "",
    "tags": null,
    "title": "What to Learn After CCNA",
    "uri": "/networking/things_to_learn_after_ccna/"
  },
  {
    "breadcrumb": "Tools",
    "content": "This is a step-by-step guide to setting up Nextcloud on a Debian server. You will need a server hosted by a VPS like Vultr. And a Domain hosted by a DNS provider such as Cloudflare\nWhat is Nextcloud? Nextcloud is so many things. It offers so many features and options, it deserves a bulleted list:\nFree and open source Cloud storage and syncing Email client Custom browser dashboard with widgets Office suite RSS newsfeed Project organization (deck) Notebook Calender Task manager Connect to decentralized social media (like Mastodon) Replacement for all of google’s services Create web forms or surveys It is also free and open source. This mean the source code is available to all. And hosting yourself means you can guarantee that your data isn’t being shared.\nAs you can see. Nextcloud is feature packed and offers an all in one solution for many needs. The set up is fairly simple!\nInstall Dependencies sudo apt update Sury Dependencies sudo apt install software-properties-common ca-certificates lsb-release apt-transport-https Enable Sury Repository sudo sh -c 'echo \"deb https://packages.sury.org/php/ $(lsb_release -sc) main\" \u003e /etc/apt/sources.list.d/php.list' Import the GPG key for the repository wget -qO - https://packages.sury.org/php/apt.gpg | sudo apt-key add - Install PHP 8.2 https://computingforgeeks.com/how-to-install-php-8-2-on-debian/?expand_article=1 (This is also part of the other dependencies install command below)\nsudo apt install php8.2 Install other dependencies: apt install -y nginx python3-certbot-nginx mariadb-server php8.2 php8.2-{fpm,bcmath,bz2,intl,gd,mbstring,mysql,zip,xml,curl}Improving Nextcloud server performance Adding more child processes for PHP to use:\nvim /etc/php/8.2/fpm/pool.d/www.conf # update the following parameters in the file pm = dynamic pm.max_children = 120 pm.start_servers = 12 pm.min_spare_servers = 6 pm.max_spare_servers = 18Start your MariaDB server: systemctl enable mariadb --nowSet up a SQL Database Nextcloud needs some tables setup in order to store information in a database. First set up a secure sql database:\nmysql_secure_installationSay “Yes” to the prompts and enter root password:\nSwitch to unix_socket authentication [Y/n]: Y Change the root password? [Y/n]: Y\t# enter password. Remove anonymous users? [Y/n]: Y Disallow root login remotely? [Y/n]: Y Remove test database and access to it? [Y/n]: Y Reload privilege tables now? [Y/n]: YSign in to your SQL database with the password you just chose:\nmysql -u root -pCreating a database for NextCloud While signed in with the mysql command, enter the commands below one at a time. Make sure to replace the username and password. But leave localhost as is:\nCREATE DATABASE nextcloud; GRANT ALL ON nextcloud.* TO 'username'@'localhost' IDENTIFIED BY 'password'; FLUSH PRIVILEGES; EXIT;Install SSL with Certbot Obtain an SSL certificate. See my website setup post for information about Certbot and nginx setup.\ncertbot certonly --nginx -d nextcloud.example.comCreate a CNAME record for DNS. You will need to have a domain name set up for your server. I use Cloudflare to manage my DNS records. You will want to make a CNAME record for your nextcloud subdomain.\nJust add “nextcloud” as the name and “yourwebsite.com” as the content. This will make it so “nextcloud.yourwebsite.com”. Make sure to select “DNS Only” under proxy status.\nNginx Setup Edit your sites-available config at /etc/nginx/sites-available/nextcloud. See comments in the following text box:\nvim /etc/nginx/sites-available/nextcloud # Add this to the file: # replace example.org with your domain name # use the following vim command to make this easier # :%s/example.org/perfectdarkmode.com/g # ^ this will replace all instances of example.org with perfectdarkmode.com. Replace with yur domain upstream php-handler { server unix:/var/run/php/php8.2-fpm.sock; server 127.0.0.1:9000; } map $arg_v $asset_immutable { \"\" \"\"; default \"immutable\"; } server { listen 80; listen [::]:80; server_name nextcloud.example.org ; return 301 https://$server_name$request_uri; } server { listen 443 ssl http2; listen [::]:443 ssl http2; server_name nextcloud.example.org ; root /var/www/nextcloud; ssl_certificate /etc/letsencrypt/live/nextcloud.example.org/fullchain.pem ; ssl_certificate_key /etc/letsencrypt/live/nextcloud.example.org/privkey.pem ; client_max_body_size 512M; client_body_timeout 300s; fastcgi_buffers 64 4K; gzip on; gzip_vary on; gzip_comp_level 4; gzip_min_length 256; gzip_proxied expired no-cache no-store private no_last_modified no_etag auth; gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/wasm application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy; client_body_buffer_size 512k; add_header Referrer-Policy \"no-referrer\" always; add_header X-Content-Type-Options \"nosniff\" always; add_header X-Download-Options \"noopen\" always; add_header X-Frame-Options \"SAMEORIGIN\" always; add_header X-Permitted-Cross-Domain-Policies \"none\" always; add_header X-Robots-Tag \"none\" always; add_header X-XSS-Protection \"1; mode=block\" always; fastcgi_hide_header X-Powered-By; index index.php index.html /index.php$request_uri; location = / { if ( $http_user_agent ~ ^DavClnt ) { return 302 /remote.php/webdav/$is_args$args; } } location = /robots.txt { allow all; log_not_found off; access_log off; } location ^~ /.well-known { location = /.well-known/carddav { return 301 /remote.php/dav/; } location = /.well-known/caldav { return 301 /remote.php/dav/; } location /.well-known/acme-challenge { try_files $uri $uri/ =404; } location /.well-known/pki-validation { try_files $uri $uri/ =404; } return 301 /index.php$request_uri; } location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)(?:$|/) { return 404; } location ~ ^/(?:\\.|autotest|occ|issue|indie|db_|console) { return 404; } location ~ \\.php(?:$|/) { # Required for legacy support rewrite ^/(?!index|remote|public|cron|core\\/ajax\\/update|status|ocs\\/v[12]|updater\\/.+|oc[ms]-provider\\/.+|.+\\/richdocumentscode\\/proxy) /index.php$request_uri; fastcgi_split_path_info ^(.+?\\.php)(/.*)$; set $path_info $fastcgi_path_info; try_files $fastcgi_script_name =404; include fastcgi_params; fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name; fastcgi_param PATH_INFO $path_info; fastcgi_param HTTPS on; fastcgi_param modHeadersAvailable true; fastcgi_param front_controller_active true; fastcgi_pass php-handler; fastcgi_intercept_errors on; fastcgi_request_buffering off; fastcgi_max_temp_file_size 0; } location ~ \\.(?:css|js|svg|gif|png|jpg|ico|wasm|tflite|map)$ { try_files $uri /index.php$request_uri; add_header Cache-Control \"public, max-age=15778463, $asset_immutable\"; access_log off; # Optional: Don't log access to assets location ~ \\.wasm$ { default_type application/wasm; } } location ~ \\.woff2?$ { try_files $uri /index.php$request_uri; expires 7d; access_log off; } location /remote { return 301 /remote.php$request_uri; } location / { try_files $uri $uri/ /index.php$request_uri; } }Enable the site Create a link between the file you just made and /etc/nginx/sites-enabled\nln -s /etc/nginx/sites-available/nextcloud /etc/nginx/sites-enabled/Install Nextcloud Download the latest Nextcloud version. Then extract into /var/www/. Also, update the file’s permissions to give nginx access:\nwget https://download.nextcloud.com/server/releases/latest.tar.bz2 tar -xjf latest.tar.bz2 -C /var/www chown -R www-data:www-data /var/www/nextcloud chmod -R 755 /var/www/nextcloudStart and enable php-fpm on startup \u003csystemctl enable php8.2fpm --now](\u003e\u003c--may not need this. # Do need this-\u003e sudo systemctl enable php8.2-fpm.service --nowReload nginx systemctl reload nginxNextcloud occ tool Here is a built in Nextcloud tool just in case things break. Here is a guide on troubleshooting with occ. The basic command is as follows:\nsudo -u www-data php /var/www/nextcloud/occAdd this as an alias in ~/.bashrc for ease of use.\nYou are ready to log in to Nextcloud! Go to your nextcloud domain in a browser. In my case, I head to nextcloud.perfectdarkmode.com. Fill out the form to create your first Nextcloud user:\nChoose an admin username and secure password. Leave Data folder as the default value. For Database user, enter the user you set for the SQL database. For Database password, enter the password you chose for the new user in MariaDB. For Database name, enter: nextcloud Leave “localhost” as “localhost”. Click Finish. Now that you are signed in. Here are a few things you can do to start you off:\nDownload the desktop and mobile app and sync all of your data. (covered below) Look at different apps to consolodate your programs all in one place. Put the Nextcloud dashboard as your default browser homepage and customize themes. Set up email integration. NextCloud desktop synchronization Install the desktop client (Fedora)\nSudo dnf install nextcloudclientInstall on other distros: https://help.nextcloud.com/t/install-nextcloud-client-for-opensuse-arch-linux-fedora-ubuntu-based-android-ios/13657\nRun the nextcloud desktop app and sign in. Choose folders to sync. Folder will be ~/Nextcloud. Move everything into your nextcloud folder. This may break things with filepaths so beware. Now you are ready to use and explore nextcloud. Here is a video from TechHut to get you started down the NextCloud rabbit hole.\nChange max upload size (default is 500mg) /var/www/nextcloud/.user.ini php_value upload_max_filesize = 16G php_value post_max_size = 16G\nRemove file locks Put Nextcloud in maintenance mode: Edit config/config.php and change this line:\n'maintenance' =\u003e true,\nEmpty table oc_file_locks: Use tools such as phpmyadmin or connect directly to your database and run (the default table prefix is oc_, this prefix can be different or even empty):\nDELETE FROM oc_file_locks WHERE 1\ndisable maintenance mode (undo first step). Make sure your cron-jobs run properly (you admin page tells you when cron ran the last time): https://docs.nextcloud.org/server/13/admin_manual/configuration_server/background_jobs_configuration.html 2.7k mysql -u root -p MariaDB [(none)]\u003e use nextcloud; MariaDB [nextcloud]\u003e DELETE FROM oc_file_locks WHERE 1; *figure out redis install if this happens regularly* [https://docs.nextcloud.org/server/13/admin_manual/configuration_server/caching_configuration.html#id4 9.1k](https://docs.nextcloud.org/server/13/admin_manual/configuration_server/caching_configuration.html#id4)",
    "description": "",
    "tags": null,
    "title": "Nextcloud Guide",
    "uri": "/tools/nextcloud/"
  },
  {
    "breadcrumb": "Tools",
    "content": "Using Rsync to sync a folder between two hosts I was using github to sync my notebook with my website. But that introduces some extra steps that rsync can easily eliminate.\nInstall rsync apt install rsyncTo upload files from your local computer to your server rsync -rtvzP /path/to/file root@example.org:/path/on/the/serverTurn the above script into an alias We will be adding an alias so you do not have to type the entire command above every time. Add the following to ~/.bashrc\nalias rsyncp='rsync -rtvzP ~/Documents/PerfectDarkMode_html/ root@perfectdarkmode.com:/var/www/PerfectDarkMode_html'Update the source for the new alias to take effect:\n$ source ~/.bashrcNow simply type “rsyncp” to run the command.\nOptions -r - Recursive -t - tranfer modification times (lets you skip files that have not been modified) -v - visual -z - with file compression -p - pick up where you left off if a file fails during transfer Download files from another host rsync -rtvzP root@example.org:/path/to/file /path/to/file",
    "description": "",
    "tags": null,
    "title": "Rsync Guide",
    "uri": "/tools/rsync/"
  },
  {
    "breadcrumb": "Tools",
    "content": "Commands Version $ git –version\nShow version of git installed Config $ git config –global user.name “username” $ git config –global user.email “email@email.com”\nLet’s git know who you are Inizialize $ git init\ninitialize git on the current working directory Status $ git status\ncheck the status of your git repo from your current working directory –short flag will show a more compact version Short status flags are:\n?? - Untracked files A - Files added to stage M - Modified files D - Deleted files\nStaging $ git add filename.txt\nstages the file $ git add –all\nstages all files in the directory clone from a remote repo git clone enter_repo_url_here\nPull Use this to update current folder with new repo changes\ngit pull origin mainLog $ git log\nView history of commits for a repository. Help $ git command -help (or –help)\noptions for a specific command $ git help –all\nSee all possible commands Link to Github Add the repository and push. You need an access toekn as the password to log in.\n[davidthomas@fedora PerfectDarkMode]$ git remote add origin https://github.com/tdavetech/perfectdarkmode.git [davidthomas@fedora PerfectDarkMode]$ git branch -M main [davidthomas@fedora PerfectDarkMode]$ git push -u origin mainCreate a personal access Token; https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token\nMake sure you are linking to HTTPS https://docs.github.com/en/get-started/getting-started-with-git/managing-remote-repositories#switching-remote-urls-from-ssh-to-https\nSummary Version control system Tracking code changes Tracking who made changes Coding collaboration Manage projects with Repositories Clone a project to work on a local copy Staging and Committing Branch and Merge to allow for work on different parts and versions of a project Push local updates to the main project How to Use Initialize Git on a folder, making it a Repository Git now creates a hidden folder to keep track of changes in that folder When a file is changed, added or deleted, it is considered modified You select the modified files you want to Stage The Staged files are Committed, which prompts Git to store a permanent snapshot of the files Git allows you to see the full history of every commit. You can revert back to any previous commit. Git does not store a separate copy of every file in every commit, but keeps track of changes made in each commit! Files in your Git repository folder can be in one of 2 states: Tracked - files that Git knows about and are added to the repository Untracked - files that are in your working directory, but not added to the repository When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.\nGit Staging Environment Staged files are files that are ready to be committed to the repository you are working on.\nGit Commit Adding commits keep track of changes. Each commit is a change point or “save point”. You can (and should) include a message with each commit.\n$ git commit\n$ git commit -m \"add comment here\" * commit and add a comment * -m flag adds a message\n$ git commit -a -m \"add message here\" * -a flag automatically stage every changed, already tracked file\nCommit without stage -a option will automatically stage every changed, already tracked file. Can make you commit unwanted changes Git Branch Branch = A new/separate version of the main repository. allow you to work on different parts of a project without impacting the main branch. a branch can be merged with the main project. switch between branches and work on different projects without them interfering with each other. Low storage/overhead $ git branch branch-name-here * create branch with name\nCheckout Need to check out a branch before committing or the branch will not be included. $ git checkout newImage; git commit\ncreate a new branch AND check it out at the same time $ git checkout -b [yourbranchname]\nWhat is GitHub? Git is not the same as GitHub. GitHub makes tools that use Git. GitHub is the largest host of source code in the world, and has been owned by Microsoft since 2018. Git Merge Combine work from two different branches. Creates a special commit with two parents $ git merge branch-name - makes a new commit with two parent (Main and the chosen branch) - Doesn’t merge the branch unless you check out the branch first.\n$ git checkout branch-name; git merge main - checkout branch and merge with main\nGit Rebase Another way of combining work between branches Takes a set of commits and copies them to somewhere else can be used to make a nice linear sequence of commits. commit log / history of the repository will be a lot cleaner if only rebasing is allowed. moves th $ git rebase main - adds selected branch as a commit over main $ git rebase branch-name - You will also need to checkout main and rebase it to the last commit\nHEAD the symbolic name for the currently checked out commit always points to the most recent commit Detaching head attaching head to a commit instead of a branch $ git checkout commit-name - checks out the commit and attaches the head\n",
    "description": "",
    "tags": null,
    "title": "Beginners Guide to Git",
    "uri": "/tools/gitguide/"
  },
  {
    "breadcrumb": "Tools",
    "content": "Hugo Setup Adding a module as a theme Make sure Go is installed\ngo versionCreate a new site\nhugo new site sitename cd sitenameInitialize your site as a module\nhugo mod init sitenameConfirm\ncat go.modAdd the module as a dependency using it’s git link\nhugo mod get github.com/McShelby/hugo-theme-relearnConfirm\ncat go.modadd the theme to config.toml\n# add this line to config.toml and save theme = [\"github.com/McShelby/hugo-theme-relearn\"]Confirm by viewing site\nhugo serve # visit browser at http://localhost:1313/ to view siteAdding a new “chapter” page\nhugo new --kind chapter Chapter/_index.mdAdd a home page\nhugo new --kind home _index.mdAdd a default page\nhugo new \u003cchapter\u003e/\u003cname\u003e/_index.mdor\nhugo new \u003cchapter\u003e/\u003cname\u003e.mdYou will need to change some options in _index.md\n+++ # is this a \"chaper\"? chapter=true archetype = \"chapter\" # page title name title = \"Linux\" # The \"chapter\" number weight = 1 +++Adding a “content page” under a category\nhugo new basics/first-content.mdCreate a sub directory:\nhugo new basics/second-content/_index.md change draft = true to draft = false in the content page to make a page render. Global site parameters Add these to your config.toml file and edit as you please\n[params] # This controls whether submenus will be expanded (true), or collapsed (false) in the # menu; if no setting is given, the first menu level is set to false, all others to true; # this can be overridden in the pages frontmatter alwaysopen = true # Prefix URL to edit current page. Will display an \"Edit\" button on top right hand corner of every page. # Useful to give opportunity to people to create merge request for your doc. # See the config.toml file from this documentation site to have an example. editURL = \"\" # Author of the site, will be used in meta information author = \"\" # Description of the site, will be used in meta information description = \"\" # Shows a checkmark for visited pages on the menu showVisitedLinks = false # Disable search function. It will hide search bar disableSearch = false # Disable search in hidden pages, otherwise they will be shown in search box disableSearchHiddenPages = false # Disables hidden pages from showing up in the sitemap and on Google (et all), otherwise they may be indexed by search engines disableSeoHiddenPages = false # Disables hidden pages from showing up on the tags page although the tag term will be displayed even if all pages are hidden disableTagHiddenPages = false # Javascript and CSS cache are automatically busted when new version of site is generated. # Set this to true to disable this behavior (some proxies don't handle well this optimization) disableAssetsBusting = false # Set this to true if you want to disable generation for generator version meta tags of hugo and the theme; # don't forget to also set Hugo's disableHugoGeneratorInject=true, otherwise it will generate a meta tag into your home page disableGeneratorVersion = false # Set this to true to disable copy-to-clipboard button for inline code. disableInlineCopyToClipBoard = false # A title for shortcuts in menu is set by default. Set this to true to disable it. disableShortcutsTitle = false # If set to false, a Home button will appear below the search bar on the menu. # It is redirecting to the landing page of the current language if specified. (Default is \"/\") disableLandingPageButton = true # When using mulitlingual website, disable the switch language button. disableLanguageSwitchingButton = false # Hide breadcrumbs in the header and only show the current page title disableBreadcrumb = true # If set to true, hide table of contents menu in the header of all pages disableToc = false # If set to false, load the MathJax module on every page regardless if a MathJax shortcode is present disableMathJax = false # Specifies the remote location of the MathJax js customMathJaxURL = \"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\" # Initialization parameter for MathJax, see MathJax documentation mathJaxInitialize = \"{}\" # If set to false, load the Mermaid module on every page regardless if a Mermaid shortcode or Mermaid codefence is present disableMermaid = false # Specifies the remote location of the Mermaid js customMermaidURL = \"https://unpkg.com/mermaid/dist/mermaid.min.js\" # Initialization parameter for Mermaid, see Mermaid documentation mermaidInitialize = \"{ \\\"theme\\\": \\\"default\\\" }\" # If set to false, load the Swagger module on every page regardless if a Swagger shortcode is present disableSwagger = false # Specifies the remote location of the RapiDoc js customSwaggerURL = \"https://unpkg.com/rapidoc/dist/rapidoc-min.js\" # Initialization parameter for Swagger, see RapiDoc documentation swaggerInitialize = \"{ \\\"theme\\\": \\\"light\\\" }\" # Hide Next and Previous page buttons normally displayed full height beside content disableNextPrev = true # Order sections in menu by \"weight\" or \"title\". Default to \"weight\"; # this can be overridden in the pages frontmatter ordersectionsby = \"weight\" # Change default color scheme with a variant one. Eg. can be \"auto\", \"red\", \"blue\", \"green\" or an array like [ \"blue\", \"green\" ]. themeVariant = \"auto\" # Change the title separator. Default to \"::\". titleSeparator = \"-\" # If set to true, the menu in the sidebar will be displayed in a collapsible tree view. Although the functionality works with old browsers (IE11), the display of the expander icons is limited to modern browsers collapsibleMenu = false # If a single page can contain content in multiple languages, add those here additionalContentLanguage = [ \"en\" ] # If set to true, no index.html will be appended to prettyURLs; this will cause pages not # to be servable from the file system disableExplicitIndexURLs = false # For external links you can define how they are opened in your browser; this setting will only be applied to the content area but not the shortcut menu externalLinkTarget = \"_blank\"Syntax highlighting Supports a variety of [Code Syntaxes] To select the syntax, wrap the code in backticks and place the syntax by the first set of backticks.\n```bash echo hello \\```Adding tags Tags are displayed in order at the top of the page. They will also display using the menu shortcut made further down.\nAdd tags to a page:\n+++ tags = [\"tutorial\", \"theme\"] title = \"Theme tutorial\" weight = 15 +++Choose a default color theme Add to config.toml with the chosen theme for the “style” option:\n[markup] [markup.highlight] # if `guessSyntax = true`, there will be no unstyled code even if no language # was given BUT Mermaid and Math codefences will not work anymore! So this is a # mandatory setting for your site if you want to use Mermaid or Math codefences guessSyntax = false # choose a color theme or create your own style = \"base16-snazzy\"Add Print option and search output page. add the following to config.toml\n[outputs] home = [\"HTML\", \"RSS\", \"PRINT\", \"SEARCH\"] section = [\"HTML\", \"RSS\", \"PRINT\"] page = [\"HTML\", \"RSS\", \"PRINT\"]Customization This theme has a bunch of editable customizations called partials. You can overwrite the default partials by putting new ones in /layouts/partials/.\nto customize “partials”, create a “partials” directory under site/layouts/\ncd layouts mkdir partials cd partialsYou can find all of the partials available for this theme here\nChange the site logo using the logo.html partial Create logo.html in /layouts/partials\nvim logo.htmlAdd the content you want in html. This can be an img html tag referencing an image in the static folder. Or even basic text. Here is the basic syntax of an html page, adding “Perfect Dark Mode” as the text to display:\n\u003c!DOCTYPE html\u003e \u003chtml\u003e \u003cbody\u003e \u003ch3\u003ePerfect Dark Mode\u003c/h3\u003e \u003c/body\u003e \u003c/html\u003eAdd a favicon to your site This is pasted from the relearn site. Add Favicon and edit * If your favicon is a SVG, PNG or ICO, just drop off your image in your local static/images/ folder and name it favicon.svg, favicon.png or favicon.ico respectively. If no favicon file is found, the theme will lookup the alternative filename logo in the same location and will repeat the search for the list of supported file types.\nIf you need to change this default behavior, create a new file in layouts/partials/ named favicon.html. Then write something like this:\n\u003clink rel=\"icon\" href=\"/images/favicon.bmp\" type=\"image/bmp\"\u003eChanging theme colors In your config.toml file edit the themeVariant option under [params]\nthemeVariant = \"relearn-dark\"There are some options to choose from or you can custom make your theme colors by using this stylesheet generator\nMenu Shortcuts Add a [[menu.shortcuts]] entry for each link\n[[menu.shortcuts]] name = \"\u003ci class='fab fa-fw fa-github'\u003e\u003c/i\u003e GitHub repo\" identifier = \"ds\" url = \"https://github.com/McShelby/hugo-theme-relearn\" weight = 10 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-camera'\u003e\u003c/i\u003e Showcases\" url = \"more/showcase/\" weight = 11 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bookmark'\u003e\u003c/i\u003e Hugo Documentation\" identifier = \"hugodoc\" url = \"https://gohugo.io/\" weight = 20 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-bullhorn'\u003e\u003c/i\u003e Credits\" url = \"more/credits/\" weight = 30 [[menu.shortcuts]] name = \"\u003ci class='fas fa-fw fa-tags'\u003e\u003c/i\u003e Tags\" url = \"tags/\" weight = 40",
    "description": "",
    "tags": null,
    "title": "How to Set up Hugo Relearn Theme",
    "uri": "/tools/hugorelearn/"
  },
  {
    "breadcrumb": "Tools",
    "content": "Word Press is great, but it is probably a lot more bloated then you need for a personal website. Enter Hugo, it has less server capacity and storage needs than Word Press. Hugo is a static site generator than takes markdown files and converts them to html.\nHosting your own website is also a lot cheaper than having a provider like Bluehost do it for you. Instead of $15 per month, I am currently paying $10 per year.\nThis guide will walk through building a website step-by-step.\nSetting up a Virtual Private Server (VPS) Registering a domain name Pointing the domain to your server Setting up hugo on your local PC Syncing your Hugo generate site with your server Using nginx to serve your site Enable http over SSL Setting up a Virtual Private Server (VPS) I use Vultr as my VPS. When I signed up they had a $250 credit towards a new account. If you select the cheapest server (you shouldn’t need anything else for a basic site) that comes out to about $6 a month. Of course the $250 credit goes towards that which equates to around 41 months free.\nHead to vultr.com. Create and account and Select the Cloud Compute option.\nUnder CPU \u0026 Storage Technology, select “Regular Performance”. Then under “Server Location, select the server closest to you. Or closest to where you think your main audience will be.\nUnder Server image, select the OS you are most comfortable with. This guide uses Debian.\nUnder Server Size, slect the 10GB SSD. Do not select the “IPv6 ONLY” option. Leave the other options as default and enter your server hostname.\nOn the products page, click your new server. You can find your server credentials and IPv4 address here. You will need these to log in to your server.\nLog into your sever via ssh to test. From a Linux terminal run:\nssh username@serveripaddressThen, enter your password when prompted.\nRegistering a Domain Name I got my domain perfectdarkmode.com from Cloudflare.com for about $10 per year. You can check to see available domains there. You can also check https://www.namecheckr.com/ to see iof that name is available on various social media sites.\nIn CLoudFlare, just click “add a site” and pick a domain that works for you. Next, you will need your server address from earlier.\nUnder domain Registration, click “Manage Domains”, click “manage” on your domain. One the sidebar to the right, there is a qucik actions menu. Click “update DNS configuration”.\nClick “Add record”. Type is an “A” record. Enter the name and the ip address that you used earlier for your server. Uncheck “Proxy Status” and save.\nYou can check to see if your DNS has updated on various DNS severs at https://dnschecker.org/. Once those are up to date (after a couple minutes) you should be able to ping your new domain.\n[davidthomas@fedora posts]$ ping perfectdarkmode.com PING perfectdarkmode.com (104.238.140.131) 56(84) bytes of data. 64 bytes from 104.238.140.131.vultrusercontent.com (104.238.140.131): icmp_seq=1 ttl=53 time=33.2 ms 64 bytes from 104.238.140.131.vultrusercontent.com (104.238.140.131): icmp_seq=2 ttl=53 time=28.2 ms 64 bytes from 104.238.140.131.vultrusercontent.com (104.238.140.131): icmp_seq=3 ttl=53 time=31.0 msNow, you can use the same ssh command to ssh into your vultr serverusing your domain name.\nssh username@domain.comSetting up hugo on your local PC Hugo is a popular open-source static site generator. It allows you to take markdown files, and builds them into and html website. To start go to https://gohugo.io/installation/ and download Hugo on your local computer. (I will show you how to upload the site to your server later.)\nPick a theme The theme I use is here https://themes.gohugo.io/themes/hugo-theme-hello-friend-ng/\nYou can browse your own themes as well. Just make sure to follow the installation instructions. Let’s create a new Hugo site. Change into the directory where you want your site to be located in. Mine rests in ~/Documents/.\ncd ~/Documents/Create your new Hugo site.\nhugo new site site-nameThis will make a new folder with your site name in the ~/Documents directory. This folder will have a few directories and a config file in it.\narchetypes config.toml content data layouts public resources static themesFor this tutorial, we will be working with the config.toml file and the content, public, static, and themes. Next, load the theme into your site directory. For the Hello Friend NG theme:\ngit clone https://github.com/rhazdon/hugo-theme-hello-friend-ng.git themes/hello-friend-ngNow we will load the example site into our working site. Say yes to overwrite.\ncp -a themes/hello-friend-ng/exampleSite/* .The top of your new config.toml site now contains:\nbaseURL = \"https://example.com\" title = \"Hello Friend NG\" languageCode = \"en-us\" theme = \"hello-friend-ng\"Replace your baseURL with your site name and give your site a title. Set the enableGlobalLanguageMenu option to false if you want to remove the language swithcer option at the top. I also set enableThemeToggle to true so users could set the theme to dark or light.\nYou can also fill in the links to your social handles. Comment out any lines you don’t want with a “#” like so:\n[params.social](params.social) name = \"twitter\" url = \"https://twitter.com/\" [params.social](params.social) name = \"email\" url = \"mailto:nobody@example.com\" [params.social](params.social) name = \"github\" url = \"https://github.com/\" [params.social](params.social) name = \"linkedin\" url = \"https://www.linkedin.com/\" # [params.social](params.social) # name = \"stackoverflow\" # url = \"https://www.stackoverflow.com/\"You may also want to edit the footer text to your liking. I commented out the second line that comes with the example site:\n[params.footer] trademark = true rss = true copyright = true author = true topText = [] bottomText = [ # \"Powered by \u003ca href=\\\"http://gohugo.io\\\"\u003eHugo\u003c/a\u003e\", # \"Made with \u0026#10084; by \u003ca href=\\\"https://github.com/rhazdon\\\"\u003eDjordje Atlialp\u003c/a\u003e\" ]Now, move the contents of the example contents folder over to your site’s contents folder (giggidy):\ncp -r ~/Documents/hugo/themes/hello-friend-ng/exampleSite/content/* ~/Documents/hugo/content/Let’s clean up a little bit. Cd into ~/Documents/hugo/content/posts. Rename the file to the name of your first post. Also, delete all of the other files here:\ncd ~/Documents/hugo/contents/posts mv goisforlovers.md newpostnamehere.md find . ! -name 'newpostnamehere.md' -type f -exec rm -f {} +Open the new post file and delete everything after this:\n+++ title = \"Building a Minimalist Website with Hugo\" description = \"\" type = [\"posts\",\"post\"] tags = [ \"hugo\", \"nginx\", \"ssl\", \"http\", \"vultr\", ] date = \"2023-03-26\" categories = [ \"tools\", \"linux\", ] series = [\"tools\"] [ author ] name = \"David Thomas\" +++You will need to fill out this header information for each new post you make. This will allow you to give your site a title, tags, date, categories, etc. This is what is called a TOML header. TOML stands for Tom’s Obvious Minimal Language. Which is a minimal language used for parsing data. Hugo uses TOML to fill out your site.\nSave your doc and exit. Next, there should be an about.md page now in your ~/Documents/hugo/Contents folder. Edit this to edit your about page for your site. You can use this Markdown Guide if you need help learning markdown language. https://www.markdownguide.org/\nNote: To insert an image into your post. Add the image to your ~/Documents/hugo/static directory. Then reference the image in your post like this:\nServe your website locally Let’s test the website by serving it locally and accessing it at localhost:1313 in your web browser. Enter the command:\nhugo serveHugo will now be generating your website. You can view it by entering localhost:1313 in your webbrowser.\nYou can use this to test new changes before uploading them to your server. When you svae a post or page file such as your about page, hugo will automatically update the changes to this local page if the local server is running.\nPress “Ctrl + c” to stop this local server. This is only for testing and does not need to be running to make your site work.\nBuild out your public directory Okay, your website is working locally, how do we get it to your server to host it online? We are almost there. First, we will use the hugo command to build opur website in the public folder. Then, we will make a copy of our public folder on our server using rsync. I will also show you how to create an alias so you do not have to remember the rsync command every time.\nFrom your hugo site folder run:\n[davidthomas@fedora hugo]$ hugo Start building sites … hugo v0.98.0+extended linux/amd64 BuildDate=unknown | EN -------------------+----- Pages | 30 Paginator pages | 0 Non-page files | 0 Static files | 16 Processed images | 0 Aliases | 15 Sitemaps | 1 Cleaned | 0 Total in 65 msNext, we will put your public hugo folder into /var/www/ on your server. Here is how to do that with an alias. Open ~/.bashrc.\nvim ~/.bashrcAdd the following line to the end of the file, making sure to replace the username and server name:\n# My custom aliases alias rsyncp='rsync -rtvzP ~/Documents/hugo/public/ username@myserver.com:/var/www/public'Save and exit the file. Then tell bash to update it’s source config file.\nsource ~/.bashrcNow your can run the command by just using the new alias any time. Your will need to do this every time you update your site locally.\nrsyncpSet up nginx on your server Install nginx\napt update apt upgrade apt install nginxcreate an nginx config file in /etc/nginx/sites-available/\nvim /etc/nginx/sites-available/publicYou will need to add the following to the file, update the options, then save and exit:\nserver { listen 80 ; listen [::]:80 ; server_name example.org ; root /var/www/mysite ; index index.html index.htm index.nginx-debian.html ; location / { try_files $uri $uri/ =404 ; } }Enter your domain in “server_name” line in place of “example.org”. Also, point “root” to your new site file from earlier. (/var/www/public). Then save and exit.\nLink this site-available config file to sites-enabled to enable it. Then restart nginx:\nln -s /etc/nginx/sites-available/public /etc/nginx/sites-enabled systemctl reload nginxAccess Permissions We will need to make sure nginx has permissions to your site folder so that it can access them to serve your site. Run:\nchmod 777 /var/www/publicFirewall Permissions You will need to make sure your firewall allows port 80 and 443. Vultr installs the ufw program by default. But your can install it if you used a different provider. Beware, enabling a firewalll could block you from accessing your vm, so do your research before tinkering outside of these instructions.\nufw allow 80 ufw allow 443Nginx Security We will want to hide your nginx version number on error pages. This will make your site a bit harder for hackers to find exploits. Open your Nginx config file at /etc/nginx/nginx.conf and remove the “#” before “server_tokens off;”\nEnter your domain into your browser. Congrats! You now have a running website!\nUse Certbot to enable HTTPS Right now, our site uses the unencrypted http. We want it to use the encrypted version HTTPS (HTTP over SSL). This will increase user privacy, hide usernames and passwords used on your site, and you get the lock symbol by your URL name instead of “!not secure”.\nInstall Certbot and It’s Nginx Module apt install python3-certbot-nginxRun certbot certbot --nginxFill out the information, certbot asks for your emaill so it can send you a reminder when the certs need to be renewed every 3 months. You do not need to consent to giving your email to the EFF. Press 1 to select your domain. And 2 too redirect all connections to HTTPS.\nCertbot will build out some information in your site’s config file. Refresh your site. You should see your new fancy lock icon.\nSet Up a Cronjob to automatically Renew certbot certs crontab -eSelect a text editor and add this line to the end of the file. Then save and exit the file:\n0 0 1 * * certbot --nginx renewYou now have a running website. Just make new posts locally, the run “hugo” to rebuild the site. And use the rsync alias to update the folder on your server. I will soon be making tutorials on making an email address for your domain, such as david@perfectdarkmode.com on my site. I will also be adding a comments section, RSS feed, email subscription, sidebar, and more.\nFeel free to reach out with any questions if you get stuck. This is meant to be an all encompassing guide. So I want it to work.\nExtras Optimizing images Create assets folder in main directory.\nCreate images folder in /assets\nAccess image using hugo pipes\n{{ $image := resources.Get \"images/test-image.jpg\" }} \u003cimg src=\"{{ ( $image.Resize \"500x\" ).RelPermalink }}\" /\u003ehttps://gohugo.io/content-management/image-processing/\n",
    "description": "",
    "tags": [
      "hugo",
      "nginx",
      "ssl",
      "http",
      "vultr"
    ],
    "title": "Building a Minimalist Website with Hugo",
    "uri": "/tools/buildawebsite/"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Categories",
    "uri": "/categories/"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - http",
    "uri": "/tags/http/"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - hugo",
    "uri": "/tags/hugo/"
  },
  {
    "breadcrumb": "Categories",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Category - linux",
    "uri": "/categories/linux/"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - nginx",
    "uri": "/tags/nginx/"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - ssl",
    "uri": "/tags/ssl/"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tags",
    "uri": "/tags/"
  },
  {
    "breadcrumb": "Categories",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Category - tools",
    "uri": "/categories/tools/"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - vultr",
    "uri": "/tags/vultr/"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Aws",
    "uri": "/aws/"
  },
  {
    "breadcrumb": "",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Cybersecurity",
    "uri": "/cybersecurity/"
  },
  {
    "breadcrumb": "Tags",
    "content": "",
    "description": "",
    "tags": null,
    "title": "Tag - Evergreen_notes",
    "uri": "/tags/evergreen_notes/"
  }
]
